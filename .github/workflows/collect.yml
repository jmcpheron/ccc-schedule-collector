name: Collect Rio Hondo Schedule

on:
  schedule:
    # Run 3 times per week: Monday, Wednesday, Friday at 6 AM UTC
    - cron: '0 6 * * 1,3,5'
  workflow_dispatch:
    inputs:
      term_code:
        description: 'Term code to collect (e.g., 202570)'
        required: false
        type: string

jobs:
  collect:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: yezz123/setup-uv@v4
      with:
        uv-version: "latest"
    
    - name: Run tests
      run: |
        chmod +x test_collector.py
        uv run test_collector.py
      continue-on-error: true  # Don't fail collection if tests fail
    
    - name: Collect schedule data
      run: |
        chmod +x collect.py
        if [ "${{ github.event.inputs.term_code }}" != "" ]; then
          echo "Collecting specific term: ${{ github.event.inputs.term_code }}"
          # Would need to modify collect.py to accept term_code argument
          uv run collect.py
        else
          uv run collect.py
        fi
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
    
    - name: Validate collected data
      run: |
        chmod +x cli.py
        # Find the latest file
        LATEST_FILE=$(ls -t data/schedule_*.json | head -1)
        echo "Validating $LATEST_FILE"
        uv run cli.py validate "$LATEST_FILE"
    
    - name: Generate collection report
      run: |
        # Generate a simple report
        LATEST_FILE=$(ls -t data/schedule_*.json | head -1)
        echo "## Collection Report - $(date)" > data/latest_report.md
        echo "" >> data/latest_report.md
        uv run cli.py info "$LATEST_FILE" --format json | python3 -c "
import sys, json
data = json.load(sys.stdin)
print(f'Total courses collected: {len(data)}')
subjects = {}
for course in data:
    subj = course['subject']
    subjects[subj] = subjects.get(subj, 0) + 1
print(f'Departments: {len(subjects)}')
print('\\nTop departments:')
for subj, count in sorted(subjects.items(), key=lambda x: x[1], reverse=True)[:10]:
    print(f'  - {subj}: {count} courses')
        " >> data/latest_report.md
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add all changes in data directory
        git add data/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Create commit message with statistics
          LATEST_FILE=$(ls -t data/schedule_*.json | head -1)
          COURSE_COUNT=$(uv run cli.py info "$LATEST_FILE" --format json | python3 -c "import sys, json; print(len(json.load(sys.stdin)))")
          
          git commit -m "ðŸ¤– Collected Rio Hondo schedule data
          
          - Courses collected: $COURSE_COUNT
          - Timestamp: $(date -u +%Y-%m-%d\ %H:%M:%S) UTC
          - File: $(basename $LATEST_FILE)"
          
          git push
        fi
    
    - name: Notify on failure
      if: failure() && github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš¨ Schedule Collection Failed',
            body: `The automated schedule collection failed on ${new Date().toISOString()}.
            
            Please check the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`,
            labels: ['bug', 'automation']
          })