name: Collect Rio Hondo Schedule

on:
  workflow_dispatch:
    inputs:
      term_code:
        description: 'Term code to collect (e.g., 202570)'
        required: false
        type: string
  schedule:
    # Run 3 times per day at offset minutes to be polite to servers
    # 6:26 AM, 2:26 PM, 10:26 PM UTC
    - cron: '26 6,14,22 * * *'

jobs:
  collect:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: yezz123/setup-uv@v4
    
    
    - name: Collect schedule data
      run: |
        chmod +x collect.py
        if [ "${{ github.event.inputs.term_code }}" != "" ]; then
          echo "Collecting specific term: ${{ github.event.inputs.term_code }}"
          uv run collect.py --term-code "${{ github.event.inputs.term_code }}"
        else
          echo "Collecting current term schedule"
          uv run collect.py
        fi
    
    - name: Validate collected data
      run: |
        chmod +x cli.py
        # Find the latest file
        LATEST_FILE=$(ls -t data/schedule_*.json | head -1)
        echo "Validating $LATEST_FILE"
        uv run cli.py validate "$LATEST_FILE"
    
    - name: Generate collection report
      run: |
        # Generate a simple report
        LATEST_FILE=$(ls -t data/schedule_*.json | head -1)
        echo "## Collection Report - $(date)" > data/latest_report.md
        echo "" >> data/latest_report.md
        uv run cli.py info "$LATEST_FILE" --format json | python3 -c "
        import sys, json
        data = json.load(sys.stdin)
        print(f'Total courses collected: {len(data)}')
        subjects = {}
        for course in data:
            subj = course['subject']
            subjects[subj] = subjects.get(subj, 0) + 1
        print(f'Departments: {len(subjects)}')
        print('\\nTop departments:')
        for subj, count in sorted(subjects.items(), key=lambda x: x[1], reverse=True)[:10]:
            print(f'  - {subj}: {count} courses')
        " >> data/latest_report.md
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add all changes in data directory
        git add data/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Create commit message with statistics
          LATEST_FILE=$(ls -t data/schedule_*.json | head -1)
          COURSE_COUNT=$(uv run cli.py info "$LATEST_FILE" --format json | python3 -c "import sys, json; print(len(json.load(sys.stdin)))")
          
          # Create commit message in git scraping style
          TIMESTAMP=$(date -u)
          git commit -m "Latest data: ${TIMESTAMP} - ${COURSE_COUNT} courses"
          
          git push
        fi
    
    - name: Create issue on failure
      if: failure() && github.event_name == 'schedule'
      run: |
        echo "Collection failed - would create issue here"
        # Note: For actual deployment, you might want to re-enable the GitHub script action
        # or use a simpler notification method